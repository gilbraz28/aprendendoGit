		git init 
			- Usado na primeira vez, sem ter baixado um projeto/arquivo via git clone
			
		git config --global user.email "gilbraz28@hotmail.com"
		git config --global user.name "Gilson"
			- Podem ser exigidas para saber quem é a pessoa que está fazendo uso do GIT
			
		git status 						
			- Exibe situação de arquivos pendentes para envio ao CONTANEIR. 
				Esse comando mostra que não tem nada pendente de commit e exibe mensagens informando
					que existem pendências para serem commitados.
				Nesses casos pendentes de commit para envio ao repositório, esse comando orienta como
				remover do CONTANEIR, em caso de desistência da efetivação ao repositório.
			
		git add . ou * ou <nome arq.)	
			- Adiciona o arquivo local do projeto no CONTANEIR local.
				Após isso, o comando git status exibe os arquivos adicionados aguardando commit.
				Nessa onsulta, o GIT também exibe opções adicionais para alterar situação dos arquivos.
				
		git commit -m ou -am "comentários do assunto "  
			- O comando commit efetiva o envia das alterações pendentes de fontes para o REPOSITÓRIO .GIT 
				ainda local. 
			- Também é exibo o código HASH de cada commit executado.
			- É pelo HEAD que é possível rastrear os commits e recuperar versões anteriores do projeto.
			- Após isso, o get status informa que não existe nenhuma alteração pendente.
			- Commit tem 2 parametros que podem ser usado:
				* -m significa que será feito um comentário referente ao commit aplicado
				* -am nesse caso, além do comentário, o "a" faz o trabalhdo do comando add, facilitando 
				o trabalho e envia os fontes alterados para o CONTANEIR.
		
		git log --oneline ou/e --graph
			- Exibe status dos arquivo COMMITADOS e que foram enviados para o diretório do GIT,
				.GIT (no explorer ele é oculto) ainda local e que depois será enviado para o GITHUB.		
				* --oneline  Mostra mais detalhes como históricos do commits executados inclusive com o 
					código HASH (apenas parte inicial) de cada commit
				* --graph Exibe o desenho do Graph de Commits. Importante ressaltar que o resultado exibido
					mostra qual é o último commit que é o associado o HEAD.
					
		git branch
			- Identifica o ramo que o projeto se encontra.
			
		git checkout <HASH>
			- Vota a versão anterior da última alteração, em outras palavras, o HEAD mudou o apontamento para
				o HASH do comando checkout.
			- Quando executado o comando git log --oneline, é apresentado apenas até a posição do HEAD que 
				foi movido pelo comando checkout, sem apresentar (esconde) o último COMMIT que seria o mais novo.
			- O comando git branch nesse cenário confirma que o HEAD foi desanexado do último commit e que está
				anexado em outro HASH.
			- Para retornar ao último commit, basta digitar o comando: git checkout master. Com isso a HEAD retorna
				ao último HASH.
				Agora, quando executado o comando git branch, nota que não é mais informado nenhum tipo de movimentação
				do HEAD.
		
		-- EXEMPLO PARA VOLTAR UMA VERSÃO
		
		git diff
			- Exibe as últimas alterações feitas antes de enviar ao CONTANEIR. 
			- Quando as alterações já foram para o CONTANEIR, não é mais apresentado nenhuma diferença de
				fontes.

			Passos:
			
				- git status -> Nesse exemplo, o comando git status exibe mensagens orientando alguns procedimentos,
					que podem ser feitas com a relação a última alteração.
					( o comando a ser executado depende da versão do GIT).
				
					
			-- VOLTAR DO REPOSITÓRIO
			
				-- git log --oneline
					- Com isso é possível ver o HASH do último commit feito que deseja voltar.
				
				-- git reset --hard <hash> - Esse HASH é o qual se deseja voltar. 
					Remove do REPOSITÓRIO sem volta.
			
-------------------------------------------------------------------------------
		-- TRABALHANDO COM RAMIFICAÇÕES
			
		git branch
			-- Nesse caso quero saber qual ramo que estou com o projeto, antes de criar nova ramificação.
				Veja que isso é no mesmo diretório/projeto que já fiz alguns commits.
			
		git checkout -b <ramo/branch>
			-- Agora é criado um novo ramo com o nome informado. Veja que isso é algo que se queria criar um 
				no novo ramo para o projeto seguir em "paralelo"
				
		git log --oneline	
			-- Nesse caso, com esse comando conseguimos ver o novo ramo/branch que foi criado
		
		git branch
			-- Com esse comando, é possível ver todos os ramos/branchs criados e o default aparece destacado.
				Tudo que for feito desse ponto para frente, vai ser feito no novo ramo/branch.
				A ramificação nova Herda tudo do ramo anterior.
		
		
		--AGORA SIMULAMOS ALTERAÇÕES NOS ARQUIVOS/FONTES
		
		git status	
			-- Permite visualizar os arquivos alterados na novo ramo/branch
			
		git add .
			-- Adicionar os arquivos alterados no CONTANEIR
		
		git status	
			-- Visualizar a confirmação do comando add feito anteriormente.
			
		git commit -m "..."
			-- Efetivar alterações no repositório local no novo ramo/branch.
			
		git log --oneline
			-- Agora é possível ver o novo commit e que a HEAD está vinculado ao novo ramo/branch
			
			Se a gente nesse momento voltar para o ramo master, veremos que não existem as alterações feitas no
			novo ramo/branch feito anteriormente.
			
			Ao voltar para o ramos master (anterior) podemos fazer alterações para simular CONFLITOS de alterações
			existentes entre os dois ramos.
			
			Após voltar para o ramo master simulamos ALTERAÇÕES REALIZADAS para documentar o conflito.
		
		git log --oneline --graph --all
			Nesse caso o comando tem um parametro novo até esse momento (ALL).
				* --all - Exibe o grafico com os dois ramos.
				
		PARA UNIR OS DOIS RAMOS E ASSIM GERAR UMA ÚNICA VERSÃO ESTÁVEL E MERGEADA DO PROJETO, 
		UNINDO AS ALTERAÇÕES REALIZADAS	NOS DOIS RAMOS/BRANCHS.
		
		git branch
			Nesse momento temos que confirmar que estamos no ramo master para fazer a fusão das alterações.
			
		git merge <ramo/branch ramificada>
			O parâmetro informado é o ramo/branch que quero fundir com o ramo/branch master.
			Esse comando em caso de identificação de conflito, irá falhar e pedir para que seja resolvido antes
			de dar prosseguimento.
			
			Neste ponto do conflito, temos que abrir o arquivo fonte com o conflito onde o GIT irá apontar os conflitos
			e onde teremos opções de ações a serem feitas no arquivo.
			
			Após tratar o conflito, voltamos ao git
		
		git status
			Esse comando irá trazer orientações sobre o conflitos existentes que ainda não foram resolvidos pelo GIT
			e até opção para abortar o procedimento.
			
		git add .
			Esse comando sobe o arquivo que estava com conflito para o CONTANEIR.
			
		git commit -m "msg informando a fusão"
			Agora a gente efetiva a alteração do arquivo/fonte que tinha conflito no REPOSITÓRIO.
			Bom deixar registrado na msg que foi uma solução de conflito e agora efetivando a fusão.
			
		git log --oneline --graph --all	
			Nesse cenário, com esse comando e esses parâmetros, fica mais facil identificar todo o trabalho de fusão
			e resolução do conflito
		
-------------------------------------------------------------------------------
		-- ENVIAR UM PROJETO LOCAL PARA O GITHUB REPOSITÓRIO REMOTO

		git remote
			-- Verifica se temos algum repositório remoto associado ao GIT local do projeto
		
		git remote add origin https://github.com/gilbraz28/estudos.git
			-- Cria uma ligação do REPOSITÓRIO local com o REPOSITÓRIO remoto do GITHUB.
			
		git remoto -v
			-- Exibe detalhes de link do seu repositorio remoto, que no caso foi criado a partir do local
		
		Agora já temos criado o repositorio remoto - origin
		
		git push -u origin master
			-- Esse comando envia os arquivos para o GITHUB
			
-------------------------------------------------------------------------------
-- COPIANDO PROJETO DO GITHUB PARA O REPOSITÓRIO LOCAL

		Após configurado a conta no GITHUB, usar comando abaixo para replicar o projeto na pasta local
		
		git clone https://github.com/gilbraz28/estudosGO.git 
			- Este caso de exemplo eu criei a estrutura de pasta e projeto com o comando clone
		
		git push	
			- Diferente do cenário acima, não precisou usar nenhum parametro, pois o servidor remoto 
				ja estava criado.
				
-- ORIENTAÇÃO DO SITE GITHUB PARA SUBIDA DE FONTES

	…or create a new repository on the command line
		echo "# aula01GO" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git branch -M main
		git remote add origin https://github.com/gilbraz28/aula01GO.git
		git push -u origin main
	…or push an existing repository from the command line
		git remote add origin https://github.com/gilbraz28/aula01GO.git
		git branch -M main
		git push -u origin main	
		
		
		
		